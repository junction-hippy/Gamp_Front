{"version":3,"sources":["components/Main.jsx","modules/loading.js","lib/createRequestSaga.js","lib/api/data.js","modules/data.js","container/MainContainer.jsx","pages/MainPage.jsx","App.jsx","modules/index.js","index.js"],"names":["Main","data","error","loading","map","item","title","id","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","handleActions","state","action","payload","type","getData","a","axios","method","url","response","dataSaga","GET_DATA","GET_DATA_SUCCESS","GET_DATA_FAILURE","getDataSaga","request","SUCCESS","FAILURE","put","call","meta","createRequestSaga","dataApi","takeLatest","MainContainer","props","useSelector","dispatch","useDispatch","useEffect","console","log","MainPage","App","path","exact","component","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","logger","run","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.f275d8b1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Main = ({ data, error, loading }) => {\n  if (error) return <h1>에러가 발생했습니다.</h1>;\n  return (\n    <div>\n      {!loading &&\n        data &&\n        data.map((item) => <p key={item.id}>{item.title}</p>)}\n    </div>\n  );\n};\n\nexport default Main;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n// 요청을 위한 액션 타입을 payload로 설정합니다. (예: “sample/GET_POST”)\n\nexport const startLoading = createAction(\n  START_LOADING,\n  (requestType) => requestType,\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  (requestType) => requestType,\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true,\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false,\n    }),\n  },\n  initialState,\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = (type) => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import axios from 'axios';\n\nexport const login = async ({ email, password }) => {\n  const response = await axios({\n    method: 'post',\n    url: '/auth/signin',\n    data: {\n      email: email,\n      password: password,\n    },\n  });\n  return response;\n};\n\nexport const getData = async () => {\n  const response = await axios({\n    method: 'get',\n    url: '/data',\n  });\n  return response;\n};\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as dataApi from '../lib/api/data';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [GET_DATA, GET_DATA_SUCCESS, GET_DATA_FAILURE] =\n  createRequestActionTypes('data/GET_DATA');\n\nexport const getData = createAction(GET_DATA, (id) => id);\n\nconst getDataSaga = createRequestSaga(GET_DATA, dataApi.getData);\nexport function* dataSaga() {\n  yield takeLatest(GET_DATA, getDataSaga);\n}\n\nconst initailState = {\n  data: null,\n  error: null,\n};\n\nexport default handleActions(\n  {\n    [GET_DATA_SUCCESS]: (state, { payload: data }) => ({\n      ...state,\n      data,\n    }),\n    [GET_DATA_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initailState,\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Main from '../components/Main';\nimport { getData } from '../modules/data';\n\nconst MainContainer = (props) => {\n  const { data } = useSelector((state) => state.data);\n  const { loading, error } = useSelector((state) => state.loading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('123');\n    dispatch(getData());\n  }, [dispatch]);\n  return <Main data={data} loading={loading} error={error} />;\n};\n\nexport default MainContainer;\n","import React from 'react';\nimport MainContainer from '../container/MainContainer';\n\nconst MainPage = (props) => {\n  return <MainContainer />;\n};\n\nexport default MainPage;\n","import { Route } from 'react-router';\nimport './App.css';\nimport MainPage from './pages/MainPage';\n\nfunction App() {\n  return (\n    <>\n      <Route path=\"/\" exact component={MainPage} />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport loading from './loading';\nimport { all } from 'redux-saga/effects';\nimport data, { dataSaga } from './data';\n\nconst rootReducer = combineReducers({ loading, data });\n\nexport function* rootSaga() {\n  yield all([dataSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer, { rootSaga } from './modules';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { HelmetProvider } from 'react-helmet-async';\nimport logger from 'redux-logger';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware, logger)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}